package org.unirender.asr.wholeword.audio;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;



public class VAD implements Runnable{
	
	AudioInputStream inputStream;
	AudioFileFormat.Type targetType = AudioFileFormat.Type.WAVE;
	File recordedfile;
	boolean bargein = false;
	int maxinitialsilence = 100; 
	int maxsilence = 50; 
	int maxtime = 10000;
	int sensitivity = 3;
	boolean infunction = true;
	int window = 23;
	TargetDataLine line;
	int indicebarge = 0;
	int indicefine = -1;
	int bytesToRead = 160;
	double EnergyThr = Math.pow(10, 8);
	boolean processend = false;
	boolean echo = false;
	
	
	public void setMaxSilence(int packs){maxsilence = packs;}
	
	public void run()
    {
        try
        {
        	//System.out.println("Lanciato recorded Audio File");
            // Ask the AudioSystem class to write audio data from the audio input stream
            // to our file in the specified data type (PCM 44.1Khz, 16-bit, stereo)
        	//AlawFormatConversionProvider alawconverter = new AlawFormatConversionProvider();
      	  	
      	  	//AudioInputStream outinputstreamed = alawconverter.getAudioInputStream(AlawFormatConversionProvider.ENC_ALAW, inputStream);
      	  	ScriviPacchetti sp = new ScriviPacchetti();
      	  	Thread t = new Thread(sp);
      	  	t.start();
      	  	
            analyze();
            
            //System.out.println("Interrotto recorded Audio File");
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }
	
	Vector<byte[]> pacchetti = null;
	public class ScriviPacchetti implements Runnable{
		
		public void run()
		{
			
			infunction = true;
			pacchetti = new Vector<byte[]>();
//			long len		=   (long)inputStream.getFrameLength() ;
//			int  frameSize	=	inputStream.getFormat().getFrameSize();
			//int bytesToRead = (int)len * frameSize ;
			
			int bytesRead =0;
			byte[] buffer = new byte[bytesToRead];
//			boolean recording = false;
			line.start();
			int i =0;
			
			while (infunction && (bytesRead>=0)){
				try{
					bytesRead = read(buffer,bytesToRead,inputStream);
					pacchetti.add(i,buffer.clone());
					i++;
					
				}
				catch(IOException e)
				{	System.out.println("Errore causato dal trasferimento del flusso audio nel buffer di tipo byte. ");}
				
			}//end while
			
			//System.out.println("CHIUSA LINEA al numero "+(i-1));
//			line.drain();
			line.close();
			saveBytes(recordedfile,generaBytes());
			
			
			
			buffer = null;
		}
		
		
//		 legge il flusso audio e lo scrive nel buffer di byte
		protected int read(byte buffer[], int bytesToRead, AudioInputStream ais) throws IOException
		{
			int nBytesRead = 0;
			int nBytesTotalRead = 0;
			
		    while (nBytesRead != -1 && bytesToRead > 0)  // ciclo di lettura.
		    {
		    	nBytesRead = ais.read(buffer, nBytesTotalRead, bytesToRead);
		        if (nBytesRead != -1)
		        {
		        	bytesToRead -= nBytesRead;
		        	nBytesTotalRead += nBytesRead;
		        }
		    }
		    return nBytesTotalRead;
		  }
	}
	
	
	
	public void analyze(){
		
		try{
			/*
			ArrayList<Byte> byteCatturati = new ArrayList<Byte>();
			AudioFormat targetAF = inputStream.getFormat();
			 */
			double energiainiziale = -1;
			boolean lastbarged = false;
			int counter = 0;
			long time = 0;
			
			//System.out.println("About to start waitBarge");

			while ((pacchetti==null)||(pacchetti.size()==0)){}
			
//			System.out.println("Let's go!!!!");
			int  frameSize	=	inputStream.getFormat().getFrameSize();
//			System.out.println("framesize :"+frameSize);
			
			int j =0; //indicatore dei pacchetti
			
			while ((infunction)&&(time<maxtime)) {
				
					//prendo il pacchetto j-esimo
					while (pacchetti.size()<j+1){}
					
					byte[] audiobytes = pacchetti.get(j);
					int lunghezza = audiobytes.length/frameSize;
					
					double[] campioni = new double[lunghezza];	
//					System.out.println("Campioni "+lunghezza);
					int db = 0;
					int start = 0;
					for (int g = 0; g< lunghezza*2; g = g + frameSize)
				    {
				       	db = (int) audiobytes[g + frameSize - 1];
				       	for (int b = frameSize - 2; b >= 0; b--)
				       	  db = db << 8 | ((int) audiobytes[g + b] & 0xff);
				       	campioni[start++] = ((double) db);
				    }
//					System.out.println("conversione ok");
					
					//controllo l'energia
					double energy = 0;
					for (int g=0;g<lunghezza;g++){
    					 energy += campioni[g]*campioni[g];
    				 }
					
					
					energy = energy/campioni.length;
//					System.out.println("Energia!!!! "+energy);
					//aggiorno l'energia iniziale
   				 	if ((energiainiziale==-1)&&(energy<EnergyThr)) {
   				 		energiainiziale = energy;
//   				 		System.out.println("Energia Iniziale "+energiainiziale);
   					 }
   				 	if ((energy >(energiainiziale+sensitivity*energiainiziale))||(energy>EnergyThr)){
					 if (!bargein){
						 if (energiainiziale==-1) energiainiziale = EnergyThr;
						 bargein = true;
						 indicebarge = j;
					 }
//					 System.out.println("Captured bytes! energy "+energy +" starting at "+indicebarge);
					 lastbarged = true;
   				 	}
   				 	else{
   				 	if (lastbarged){
//						 System.out.println("l'ultimo pacchetto � parlato");
						 lastbarged = false;
						 counter = 1;
					 }
					 else{
//						 System.out.println("l'ultimo � silenzio");
						 counter ++;
					 }
					 if ((bargein)&&(counter>maxsilence)){
//						 System.out.println("Voce!");
						 infunction = false;
						 indicefine = j;
						 break;
					 }
					 else if (counter>maxinitialsilence){
						 System.out.println("Non � stato pronunciato nulla");
						 infunction = false;
						 break;
					 }
   				 	}
   				 	
   				 	j++;
   				 	time += window;
   				 	
   				 
			}
			
			if (indicefine==-1) indicefine = j-1;
			
			infunction = false;
			
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	
	public byte[] generaBytes(){

//		int m = pacchetti.size();
//		System.out.println("Numero Pacchetti "+m);
		byte []audio = new byte[((indicefine-indicebarge+1)*bytesToRead)];
//		System.out.println("Audio "+audio.length+" pacchetti: "+(m-indicebarge));
		int k =0;
		try{
		for (int i=indicebarge;i<=indicefine;i++){
			byte []audiopack =  pacchetti.get(i);
//			System.out.println("bytesToRead: "+bytesToRead+" lunghezza pacchetto: "+audiopack.length);
			for (int j=0;j<bytesToRead;j++){
				audio[k] = audiopack[j];
				k++;
			}
		}
		}catch(Exception e){
			e.printStackTrace();
			System.out.println("ERRORE: "+k);
		}
		return audio;
	}
	
    public void saveBytes (File filename, byte[] data){
    	try{
    		ByteArrayInputStream bais = new ByteArrayInputStream(data);
    		int  frameSize	=	inputStream.getFormat().getFrameSize();
    		int lunghezza = data.length/frameSize;
    		AudioInputStream ais = new AudioInputStream(bais, inputStream.getFormat(), lunghezza);
    		AudioSystem.write(ais, AudioFileFormat.Type.WAVE, recordedfile);
    		
    		processend=true;
    		/*
    		System.out.println("lunghezza data "+data.length);
    		AudioInputStream ais = new AudioInputStream(bais, format, input.length);	
    	AudioInputStream gsmAIS = AudioSystem.getAudioInputStream(new ByteArrayInputStream(data));
        pcmAIS = AudioSystem.getAudioInputStream(Encoding.PCM_SIGNED, gsmAIS);
        AudioSystem.write(pcmAIS,AudioFileFormat.Type.WAVE, filename);
        
        */
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }

    SourceDataLine auline = null;
    
    
	
	
    
    public void openaudio(){
    	
    	AudioFormat format = inputStream.getFormat();
		DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);
		try {
			auline = (SourceDataLine) AudioSystem.getLine(info);
			auline.open(format);
		} catch (LineUnavailableException e) {
			e.printStackTrace();
			return;
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}
		auline.start();
    }
    public void playaudio(byte[] b){auline.write(b, 0, b.length);}
    
    public void closeaudio(){
    	auline.drain();
		auline.close();
		auline.stop();
    }
}
